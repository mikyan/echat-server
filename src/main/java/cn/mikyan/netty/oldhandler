		// // 2. 判断消息类型，根据不同的类型来处理不同的业务
		
		// if (action == MsgActionEnum.CONNECT.type) {
		// 	// 	2.1  当websocket 第一次open的时候，初始化channel，把用的channel和userid关联起来
		// 	String senderId = dataContent.getChatMsg().getSenderId();
		// 	UserChannelRel.put(senderId, currentChannel);
			
		// 	// 测试
		// 	for (Channel c : users) {
		// 		System.out.println(c.id().asLongText());
		// 	}
		// 	UserChannelRel.output();
		// } else if (action == MsgActionEnum.CHAT.type) {
		// 	//  2.2  聊天类型的消息，把聊天记录保存到数据库，同时标记消息的签收状态[未签收]
		// 	ChatMsg chatMsg = dataContent.getChatMsg();
		// 	String msgText = chatMsg.getMsg();
		// 	String receiverId = chatMsg.getReceiverId();
		// 	String senderId = chatMsg.getSenderId();
			
		// 	// 保存消息到数据库，并且标记为 未签收
		// 	UserService userService = (UserService)SpringUtil.getBean("userServiceImpl");
		// 	String msgId = userService.saveMsg(chatMsg);
		// 	chatMsg.setMsgId(msgId);
			
		// 	DataContent dataContentMsg = new DataContent();
		// 	dataContentMsg.setChatMsg(chatMsg);
			
		// 	// 发送消息
		// 	// 从全局用户Channel关系中获取接受方的channel
		// 	Channel receiverChannel = UserChannelRel.get(receiverId);
		// 	if (receiverChannel == null) {
		// 		// TODO channel为空代表用户离线，推送消息（JPush，个推，小米推送）
		// 	} else {
		// 		// 当receiverChannel不为空的时候，从ChannelGroup去查找对应的channel是否存在
		// 		Channel findChannel = users.find(receiverChannel.id());
		// 		if (findChannel != null) {
		// 			// 用户在线
		// 			receiverChannel.writeAndFlush(
		// 					new TextWebSocketFrame(
		// 							JsonUtils.objectToJson(dataContentMsg)));
		// 		} else {
		// 			// 用户离线 TODO 推送消息
		// 			/**
		// 			 * 这里有很明显的问题，在用户id和channel对应的map里找到了channel，但是在channelgroup里没有找到
		// 			 * 那么应该是因为用户离线了，但是并没有清除原来的channel，做两个改进
		// 			 * 一、在用户离线，清楚channelGroup里channel的同时，清楚userchannelrel里的channel
		// 			 * 二、在这个地方添加清楚userchannelrel内channel的代码
		// 			 */
		// 		}
		// 	}
			
		// } else if (action == MsgActionEnum.SIGNED.type) {
		// 	//  2.3  签收消息类型，针对具体的消息进行签收，修改数据库中对应消息的签收状态[已签收]
			
		// 	UserService userService = (UserService)SpringUtil.getBean("userServiceImpl");
		// 	// 扩展字段在signed类型的消息中，代表需要去签收的消息id，逗号间隔
		// 	String msgIdsStr = dataContent.getExtand();
		// 	String msgIds[] = msgIdsStr.split(",");
			
		// 	List<String> msgIdList = new ArrayList<>();
		// 	for (String mid : msgIds) {
		// 		if (StringUtils.isNotBlank(mid)) {
		// 			msgIdList.add(mid);
		// 		}
		// 	}
			
		// 	System.out.println(msgIdList.toString());
			
		// 	if (msgIdList != null && !msgIdList.isEmpty() && msgIdList.size() > 0) {
		// 		// 批量签收
		// 		userService.updateMsgSigned(msgIdList);
		// 	}
			
		// } else if (action == MsgActionEnum.KEEPALIVE.type) {
		// 	//  2.4  心跳类型的消息
		// 	System.out.println("收到来自channel为[" + currentChannel + "]的心跳包...");
		// }